function gaptrial2 = importGapTrial(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   GAPTRIAL2 = IMPORTFILE(FILENAME) Reads data from text file FILENAME for
%   the default selection.
%
%   GAPTRIAL2 = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows
%   STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   gaptrial2 = importfile('gap_trial2.csv', 2, 49);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2019/02/05 16:06:33

%% Initialize variables.
delimiter = ',';
if nargin<=2
    startRow = 2;
    endRow = inf;
end

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');
if fileID < 0
    gaptrial2 = table;
else
%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,30,31,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,60,62]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1)
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData(row), regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if numbers.contains(',')
                thousandsRegExp = '^[-/+]*\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'))
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator
                numbers = textscan(char(strrep(numbers, ',', '')), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch
            raw{row, col} = rawData{row};
        end
    end
end


%% Split data into numeric and string columns.
rawNumericColumns = raw(:, [1,2,3,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,30,31,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,60,62]);
rawStringColumns = string(raw(:, [4,6,29,32,35,52,53,59,61]));


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Make sure any text containing <undefined> is properly converted to an <undefined> categorical
for catIdx = [1,2,3,4,5,6,7,8,9]
    idx = (rawStringColumns(:, catIdx) == "<undefined>");
    rawStringColumns(idx, catIdx) = "";
end

%% Create output variable
gaptrial2 = table;
gaptrial2.TrialOnsetLocalTime = cell2mat(rawNumericColumns(:, 1));
gaptrial2.TrialOnsetRemoteTime = cell2mat(rawNumericColumns(:, 2));
gaptrial2.StimulusWidthCm = cell2mat(rawNumericColumns(:, 3));
gaptrial2.CentStimImage = categorical(rawStringColumns(:, 1));
gaptrial2.CentStimSound = cell2mat(rawNumericColumns(:, 4));
gaptrial2.PeriStimImage = categorical(rawStringColumns(:, 2));
gaptrial2.PeriStimSound = cell2mat(rawNumericColumns(:, 5));
gaptrial2.StimSide = cell2mat(rawNumericColumns(:, 6));
gaptrial2.CSOnsetTimeLocal = cell2mat(rawNumericColumns(:, 7));
gaptrial2.CSOnsetTimeRemote = cell2mat(rawNumericColumns(:, 8));
gaptrial2.CSGazeOnsetTimeLocal = cell2mat(rawNumericColumns(:, 9));
gaptrial2.CSGazeOnsetTimeRemote = cell2mat(rawNumericColumns(:, 10));
gaptrial2.CSGazeOffsetTimeRemote = cell2mat(rawNumericColumns(:, 11));
gaptrial2.CSGazeSkipped = cell2mat(rawNumericColumns(:, 12));
gaptrial2.GapOnsetTimeLocal = cell2mat(rawNumericColumns(:, 13));
gaptrial2.GapOnsetTimeRemote = cell2mat(rawNumericColumns(:, 14));
gaptrial2.PeriOnsetTimeLocal = cell2mat(rawNumericColumns(:, 15));
gaptrial2.PeriOnsetTimeRemote = cell2mat(rawNumericColumns(:, 16));
gaptrial2.PSGazeSkipped = cell2mat(rawNumericColumns(:, 17));
gaptrial2.RewardOnsetTimeLocal = cell2mat(rawNumericColumns(:, 18));
gaptrial2.RewardOnsetTimeRemote = cell2mat(rawNumericColumns(:, 19));
gaptrial2.RewardOffsetTimeLocal = cell2mat(rawNumericColumns(:, 20));
gaptrial2.RewardOffsetTimeRemote = cell2mat(rawNumericColumns(:, 21));
gaptrial2.ITI = cell2mat(rawNumericColumns(:, 22));
gaptrial2.TrialOffsetLocalTime = cell2mat(rawNumericColumns(:, 23));
gaptrial2.TrialOffsetRemoteTime = cell2mat(rawNumericColumns(:, 24));
gaptrial2.ValidTrial = cell2mat(rawNumericColumns(:, 25));
gaptrial2.ValidGazeOnCS = cell2mat(rawNumericColumns(:, 26));
gaptrial2.ValidGazeOnCsReason = categorical(rawStringColumns(:, 3));
gaptrial2.ValidGazeOnCsProp = cell2mat(rawNumericColumns(:, 27));
gaptrial2.ValidGazeOnCsAtPSOnset = cell2mat(rawNumericColumns(:, 28));
gaptrial2.ValidGazeOnCsAtPSOnsetReason = categorical(rawStringColumns(:, 4));
gaptrial2.ValidGazeOnCsAtPSOnsetProp = cell2mat(rawNumericColumns(:, 29));
gaptrial2.ValidGazeToPS1200 = cell2mat(rawNumericColumns(:, 30));
gaptrial2.ValidGazeToPS1200Reason = categorical(rawStringColumns(:, 5));
gaptrial2.ValidGazeToPsOppo1200 = cell2mat(rawNumericColumns(:, 31));
gaptrial2.ValidGazeToPsOppo1200Reason = cell2mat(rawNumericColumns(:, 32));
gaptrial2.ValidGazeToPsOppo1200Prop = cell2mat(rawNumericColumns(:, 33));
gaptrial2.ValidGazeToPS200 = cell2mat(rawNumericColumns(:, 34));
gaptrial2.ValidGazeStuckOnCs = cell2mat(rawNumericColumns(:, 35));
gaptrial2.ETNumSamples = cell2mat(rawNumericColumns(:, 36));
gaptrial2.ETLostSamples = cell2mat(rawNumericColumns(:, 37));
gaptrial2.ETLostProp = cell2mat(rawNumericColumns(:, 38));
gaptrial2.ETLostTime = cell2mat(rawNumericColumns(:, 39));
gaptrial2.ETGazeOnScreenProp = cell2mat(rawNumericColumns(:, 40));
gaptrial2.ETGazeOnScreenTime = cell2mat(rawNumericColumns(:, 41));
gaptrial2.Version = cell2mat(rawNumericColumns(:, 42));
gaptrial2.gap_no_ps_spin = cell2mat(rawNumericColumns(:, 43));
gaptrial2.ParticipantID = cell2mat(rawNumericColumns(:, 44));
gaptrial2.TimePoint = cell2mat(rawNumericColumns(:, 45));
gaptrial2.Counterbalance = cell2mat(rawNumericColumns(:, 46));
gaptrial2.Site = categorical(rawStringColumns(:, 6));
gaptrial2.TaskName = categorical(rawStringColumns(:, 7));
gaptrial2.BGColour = cell2mat(rawNumericColumns(:, 47));
gaptrial2.NumTrials = cell2mat(rawNumericColumns(:, 48));
gaptrial2.StartTrial = cell2mat(rawNumericColumns(:, 49));
gaptrial2.BlockNo = cell2mat(rawNumericColumns(:, 50));
gaptrial2.GapCsSnd = cell2mat(rawNumericColumns(:, 51));
gaptrial2.GapCsImg = categorical(rawStringColumns(:, 8));
gaptrial2.GapBGCol = cell2mat(rawNumericColumns(:, 52));
gaptrial2.Condition = categorical(rawStringColumns(:, 9));
gaptrial2.Side = cell2mat(rawNumericColumns(:, 53));
end
